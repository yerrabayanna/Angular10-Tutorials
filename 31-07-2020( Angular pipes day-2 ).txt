7. PercentPipe: Transforms a number into a percentage string.
Syntax:
{{ data | percent: ‘digitsInfo’ }}
Ex:
public sales = 0.259;
{{ sales | percent }} 26%
{{ sales | percent: ‘2.2-2’ }} 25.90%
8. SlicePipe: It creates a new Array or string containing a subset (sliced) of the
elements.
Syntax:
{{ collection | slice:startIndex:endIndex }}
Ex:
public products = ['TV', 'Mobile', 'Shoe', 'Watch'];
<h2>Products</h2>
 <ol>
 <li *ngFor="let item of products |slice:1:3">
 {{item}}
 </li>
 </ol>
9. JsonPipe: It is used to convert the data into JSON format. You can access the form
data, convert into JSON and send to any API Service.
Syntax:
{{ data | json }}
Ex:
public product = {
 Name: 'Samsung TV',
 Price: 45000.50,
 Mfd: new Date('2020/04-20'),
 Sales: 0.259
 };
<pre>
 {{product | json}}
 </pre>
O/P:
{
 "Name": "Samsung TV",
 "Price": 45000.5,
 "Mfd": "2020-04-19T18:30:00.000Z",
 "Sales": 0.259
}
10. KeyValuePipe: It is uses to transform an object or map into an array of key and value
pairs.
Without KeyValue Pipe you have to use iterator with “in” operator to
read
 Keys and values from any object.
Ex:
for(var property in object)
{
 Console.log(property + “:“ + object[property]); 
}
KeyValue Pipe provide the properties “key & value” which allow to
read keys and values from any object.
Ex:
 public products = ['TV', 'Mobile', 'Shoe', 'Watch'];
 public data:{[key:number]:string} = {1: 'Samsung TV', 2: 'Nike Casual'};
<h2>Products Array</h2>
 <ol class="list-unstyled">
 <li *ngFor="let item of products | keyvalue">
 [{{item.key}}] {{item.value}}
 </li>
 </ol>
<h2>Products Map</h2>
 <ol class="list-unstyled">
 <li *ngFor="let item of data | keyvalue">
 {{item.key}} - {{item.value}}
 </li>
 </ol>
11. I18nSelectPipe : I18 is a community, which designed SelectPipe for Angular.
 It is a Generic selector that can make decision dynamically
according to the
 state or value and define the result when the relative condition
matches.
 [In early versions we have to depend on lot of Iterations and
conditions]
Syntax:
{{ value_expression | i18Select: mapping }}
Ex:
Pipedemo.component.ts
import { Component, OnInit } from '@angular/core';
@Component({
 selector: 'app-pipedemo',
 templateUrl: './pipedemo.component.html',
 styleUrls: ['./pipedemo.component.css']
})
export class PipedemoComponent {
 public products = [
 {Name: 'Samsung TV', City: 'Goa'},
 {Name: 'Nike Casuals', City: 'Delhi'},
 {Name: 'Mobile', City: 'Hyderabad'},
 {Name: 'Watch', City: 'Mumbai'}
 ];
 public statusMessage = {
 'Hyderabad': 'Delivery in 2 Days',
 'Delhi': 'Delivery in 5 Days',
 'Mumbai': 'Not Deliverable',
 'other': 'Unknown'
 };
}
Pipedemo.component.html
<div class="container">
 <h2>Products Status</h2>
 <table class="table table-hover">
 <thead>
 <tr>
 <th>Name</th>
 <th>City</th>
 <th>Delivery Status</th>
 </tr>
 </thead>
 <tbody>
 <tr *ngFor="let item of products">
 <td>{{item.Name}}</td>
 <td>{{item.City}}</td>
 <td>{{item.City |i18nSelect:statusMessage}}</td>
 </tr>
 </tbody>
 </table>
</div>